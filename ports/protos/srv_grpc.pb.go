// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package hproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RecipeClient is the client API for Recipe service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecipeClient interface {
	AddRecipe(ctx context.Context, in *AddRecipeRequest, opts ...grpc.CallOption) (*AddRecipeResponse, error)
}

type recipeClient struct {
	cc grpc.ClientConnInterface
}

func NewRecipeClient(cc grpc.ClientConnInterface) RecipeClient {
	return &recipeClient{cc}
}

func (c *recipeClient) AddRecipe(ctx context.Context, in *AddRecipeRequest, opts ...grpc.CallOption) (*AddRecipeResponse, error) {
	out := new(AddRecipeResponse)
	err := c.cc.Invoke(ctx, "/Recipe/AddRecipe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecipeServer is the server API for Recipe service.
// All implementations must embed UnimplementedRecipeServer
// for forward compatibility
type RecipeServer interface {
	AddRecipe(context.Context, *AddRecipeRequest) (*AddRecipeResponse, error)
	mustEmbedUnimplementedRecipeServer()
}

// UnimplementedRecipeServer must be embedded to have forward compatible implementations.
type UnimplementedRecipeServer struct {
}

func (UnimplementedRecipeServer) AddRecipe(context.Context, *AddRecipeRequest) (*AddRecipeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRecipe not implemented")
}
func (UnimplementedRecipeServer) mustEmbedUnimplementedRecipeServer() {}

// UnsafeRecipeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecipeServer will
// result in compilation errors.
type UnsafeRecipeServer interface {
	mustEmbedUnimplementedRecipeServer()
}

func RegisterRecipeServer(s grpc.ServiceRegistrar, srv RecipeServer) {
	s.RegisterService(&Recipe_ServiceDesc, srv)
}

func _Recipe_AddRecipe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRecipeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecipeServer).AddRecipe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Recipe/AddRecipe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecipeServer).AddRecipe(ctx, req.(*AddRecipeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Recipe_ServiceDesc is the grpc.ServiceDesc for Recipe service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Recipe_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Recipe",
	HandlerType: (*RecipeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddRecipe",
			Handler:    _Recipe_AddRecipe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ports/protos/srv.proto",
}
